{"ast":null,"code":"import { getAuth, signInWithPopup, GoogleAuthProvider, GithubAuthProvider, signInWithEmailAndPassword, createUserWithEmailAndPassword, updateProfile, signOut } from \"firebase/auth\";\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, doc, setDoc, getDoc, enableIndexedDbPersistence } from \"firebase/firestore\";\n\n// Configuração do Firebase\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCG5Ipy3n97_Q0wuW3OIpRlFWKRorRh8Wg\",\n  authDomain: \"n3desweb.firebaseapp.com\",\n  projectId: \"n3desweb\",\n  storageBucket: \"n3desweb.appspot.com\",\n  messagingSenderId: \"506352280001\",\n  appId: \"1:506352280001:web:085c2d8997a3e2f19b4f40\",\n  measurementId: \"G-K4TTM7E95W\"\n};\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth();\nconst db = getFirestore(app);\n\n// Habilitar persistência offline no Firestore\nenableIndexedDbPersistence(db).catch(err => {\n  if (err.code === \"failed-precondition\") {\n    console.error(\"Persistência offline falhou: múltiplas abas abertas.\");\n  } else if (err.code === \"unimplemented\") {\n    console.error(\"Persistência offline não é suportada no navegador.\");\n  }\n});\n\n// Login com Google\nexport const signInWithGoogle = async () => {\n  try {\n    const provider = new GoogleAuthProvider();\n    const result = await signInWithPopup(auth, provider);\n    const user = result.user;\n    const userDocRef = doc(db, \"users\", user.uid);\n    const userDoc = await getDoc(userDocRef);\n    if (!userDoc.exists()) {\n      await setDoc(userDocRef, {\n        name: user.displayName,\n        email: user.email,\n        isAdmin: false\n      });\n    }\n    return user;\n  } catch (error) {\n    console.error(\"Erro ao fazer login com Google:\", error.message);\n    throw new Error(\"Falha no login com Google. Tente novamente mais tarde.\");\n  }\n};\n\n// Login com GitHub\nexport const signInWithGithub = async () => {\n  try {\n    const provider = new GithubAuthProvider();\n    const result = await signInWithPopup(auth, provider);\n    const user = result.user;\n    const userDocRef = doc(db, \"users\", user.uid);\n    const userDoc = await getDoc(userDocRef);\n    if (!userDoc.exists()) {\n      await setDoc(userDocRef, {\n        name: user.displayName,\n        email: user.email,\n        isAdmin: false\n      });\n    }\n    return user;\n  } catch (error) {\n    console.error(\"Erro ao fazer login com GitHub:\", error.message);\n    throw new Error(\"Falha no login com GitHub. Tente novamente mais tarde.\");\n  }\n};\n\n// Login com e-mail e senha\nexport const loginWithEmail = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    return userCredential.user;\n  } catch (error) {\n    console.error(\"Erro ao fazer login com e-mail:\", error.message);\n    throw new Error(\"Falha no login. Verifique suas credenciais e tente novamente.\");\n  }\n};\n\n// Cadastro com e-mail e senha\nexport const registerWithEmailAndPassword = async (name, email, password, isAdmin = false) => {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n    await updateProfile(user, {\n      displayName: name\n    });\n    await setDoc(doc(db, \"users\", user.uid), {\n      name,\n      email,\n      isAdmin\n    });\n    return user;\n  } catch (error) {\n    console.error(\"Erro ao cadastrar usuário:\", error.message);\n    throw new Error(\"Falha no cadastro. Tente novamente mais tarde.\");\n  }\n};\n\n// Buscar dados do usuário\nexport const getUserData = async uid => {\n  try {\n    const userDocRef = doc(db, \"users\", uid);\n    const userDoc = await getDoc(userDocRef);\n    if (userDoc.exists()) {\n      return userDoc.data();\n    } else {\n      console.warn(`Usuário com UID ${uid} não encontrado no Firestore.`);\n      throw new Error(\"Usuário não encontrado no banco de dados.\");\n    }\n  } catch (error) {\n    console.error(\"Erro ao buscar dados do usuário:\", error.message);\n    throw new Error(\"Não foi possível carregar os dados do usuário.\");\n  }\n};\n\n// Logout\nexport const logout = async () => {\n  try {\n    return signOut(auth);\n  } catch (error) {\n    console.error(\"Erro ao fazer logout:\", error.message);\n    throw new Error(\"Falha no logout. Tente novamente mais tarde.\");\n  }\n};","map":{"version":3,"names":["getAuth","signInWithPopup","GoogleAuthProvider","GithubAuthProvider","signInWithEmailAndPassword","createUserWithEmailAndPassword","updateProfile","signOut","initializeApp","getFirestore","doc","setDoc","getDoc","enableIndexedDbPersistence","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","db","catch","err","code","console","error","signInWithGoogle","provider","result","user","userDocRef","uid","userDoc","exists","name","displayName","email","isAdmin","message","Error","signInWithGithub","loginWithEmail","password","userCredential","registerWithEmailAndPassword","getUserData","data","warn","logout"],"sources":["C:/N3_DESWEB/LoginDashboardProject/src/utils/auth.js"],"sourcesContent":["import {\n  getAuth,\n  signInWithPopup,\n  GoogleAuthProvider,\n  GithubAuthProvider,\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  updateProfile,\n  signOut,\n} from \"firebase/auth\";\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, doc, setDoc, getDoc, enableIndexedDbPersistence } from \"firebase/firestore\";\n\n// Configuração do Firebase\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCG5Ipy3n97_Q0wuW3OIpRlFWKRorRh8Wg\",\n  authDomain: \"n3desweb.firebaseapp.com\",\n  projectId: \"n3desweb\",\n  storageBucket: \"n3desweb.appspot.com\",\n  messagingSenderId: \"506352280001\",\n  appId: \"1:506352280001:web:085c2d8997a3e2f19b4f40\",\n  measurementId: \"G-K4TTM7E95W\",\n};\n\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth();\nconst db = getFirestore(app);\n\n// Habilitar persistência offline no Firestore\nenableIndexedDbPersistence(db).catch((err) => {\n  if (err.code === \"failed-precondition\") {\n    console.error(\"Persistência offline falhou: múltiplas abas abertas.\");\n  } else if (err.code === \"unimplemented\") {\n    console.error(\"Persistência offline não é suportada no navegador.\");\n  }\n});\n\n// Login com Google\nexport const signInWithGoogle = async () => {\n  try {\n    const provider = new GoogleAuthProvider();\n    const result = await signInWithPopup(auth, provider);\n    const user = result.user;\n\n    const userDocRef = doc(db, \"users\", user.uid);\n    const userDoc = await getDoc(userDocRef);\n\n    if (!userDoc.exists()) {\n      await setDoc(userDocRef, {\n        name: user.displayName,\n        email: user.email,\n        isAdmin: false,\n      });\n    }\n\n    return user;\n  } catch (error) {\n    console.error(\"Erro ao fazer login com Google:\", error.message);\n    throw new Error(\"Falha no login com Google. Tente novamente mais tarde.\");\n  }\n};\n\n// Login com GitHub\nexport const signInWithGithub = async () => {\n  try {\n    const provider = new GithubAuthProvider();\n    const result = await signInWithPopup(auth, provider);\n    const user = result.user;\n\n    const userDocRef = doc(db, \"users\", user.uid);\n    const userDoc = await getDoc(userDocRef);\n\n    if (!userDoc.exists()) {\n      await setDoc(userDocRef, {\n        name: user.displayName,\n        email: user.email,\n        isAdmin: false,\n      });\n    }\n\n    return user;\n  } catch (error) {\n    console.error(\"Erro ao fazer login com GitHub:\", error.message);\n    throw new Error(\"Falha no login com GitHub. Tente novamente mais tarde.\");\n  }\n};\n\n// Login com e-mail e senha\nexport const loginWithEmail = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    return userCredential.user;\n  } catch (error) {\n    console.error(\"Erro ao fazer login com e-mail:\", error.message);\n    throw new Error(\"Falha no login. Verifique suas credenciais e tente novamente.\");\n  }\n};\n\n// Cadastro com e-mail e senha\nexport const registerWithEmailAndPassword = async (name, email, password, isAdmin = false) => {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n\n    await updateProfile(user, { displayName: name });\n\n    await setDoc(doc(db, \"users\", user.uid), {\n      name,\n      email,\n      isAdmin,\n    });\n\n    return user;\n  } catch (error) {\n    console.error(\"Erro ao cadastrar usuário:\", error.message);\n    throw new Error(\"Falha no cadastro. Tente novamente mais tarde.\");\n  }\n};\n\n// Buscar dados do usuário\nexport const getUserData = async (uid) => {\n  try {\n    const userDocRef = doc(db, \"users\", uid);\n    const userDoc = await getDoc(userDocRef);\n\n    if (userDoc.exists()) {\n      return userDoc.data();\n    } else {\n      console.warn(`Usuário com UID ${uid} não encontrado no Firestore.`);\n      throw new Error(\"Usuário não encontrado no banco de dados.\");\n    }\n  } catch (error) {\n    console.error(\"Erro ao buscar dados do usuário:\", error.message);\n    throw new Error(\"Não foi possível carregar os dados do usuário.\");\n  }\n};\n\n// Logout\nexport const logout = async () => {\n  try {\n    return signOut(auth);\n  } catch (error) {\n    console.error(\"Erro ao fazer logout:\", error.message);\n    throw new Error(\"Falha no logout. Tente novamente mais tarde.\");\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}