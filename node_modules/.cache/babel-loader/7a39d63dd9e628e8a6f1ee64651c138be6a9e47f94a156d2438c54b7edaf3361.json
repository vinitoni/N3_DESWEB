{"ast":null,"code":"import { getAuth, signInWithEmailAndPassword, GoogleAuthProvider, signInWithPopup, GithubAuthProvider, createUserWithEmailAndPassword, updateProfile, signOut } from \"firebase/auth\";\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\n\n// Configuração do Firebase\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCG5Ipy3n97_Q0wuW3OIpRlFWKRorRh8Wg\",\n  authDomain: \"n3desweb.firebaseapp.com\",\n  projectId: \"n3desweb\",\n  storageBucket: \"n3desweb.appspot.com\",\n  messagingSenderId: \"506352280001\",\n  appId: \"1:506352280001:web:085c2d8997a3e2f19b4f40\",\n  measurementId: \"G-K4TTM7E95W\"\n};\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getFirestore(app);\n\n// Login com Google\nexport const signInWithGoogle = async () => {\n  try {\n    const provider = new GoogleAuthProvider();\n    const result = await signInWithPopup(auth, provider);\n    const user = result.user;\n    const userDocRef = doc(db, \"users\", user.uid);\n    const userDoc = await getDoc(userDocRef);\n    if (!userDoc.exists()) {\n      await setDoc(userDocRef, {\n        name: user.displayName || \"Usuário\",\n        email: user.email,\n        isAdmin: false,\n        createdAt: new Date()\n      });\n    }\n    return user;\n  } catch (error) {\n    console.error(\"Erro ao fazer login com Google:\", error.message);\n    throw new Error(\"Falha no login com Google. Tente novamente mais tarde.\");\n  }\n};\n\n// Login com GitHub\nexport const signInWithGithub = async () => {\n  try {\n    const provider = new GithubAuthProvider();\n    const result = await signInWithPopup(auth, provider);\n    const user = result.user;\n    const userDocRef = doc(db, \"users\", user.uid);\n    const userDoc = await getDoc(userDocRef);\n    if (!userDoc.exists()) {\n      await setDoc(userDocRef, {\n        name: user.displayName || \"Usuário\",\n        email: user.email,\n        isAdmin: false,\n        createdAt: new Date()\n      });\n    }\n    return user;\n  } catch (error) {\n    console.error(\"Erro ao fazer login com GitHub:\", error.message);\n    throw new Error(\"Falha no login com GitHub. Tente novamente mais tarde.\");\n  }\n};\n\n// Login com E-mail/Senha\nexport const loginWithEmail = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    return userCredential.user;\n  } catch (error) {\n    console.error(\"Erro ao fazer login com e-mail:\", error.message);\n    throw new Error(\"Falha no login. Verifique suas credenciais e tente novamente.\");\n  }\n};\n\n// Cadastro com E-mail/Senha\nexport const registerWithEmailAndPassword = async (name, email, password) => {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n\n    // Atualiza o perfil do usuário no Firebase Auth\n    await updateProfile(user, {\n      displayName: name\n    });\n\n    // Cria o documento do usuário no Firestore\n    await setDoc(doc(db, \"users\", user.uid), {\n      name,\n      email,\n      isAdmin: false,\n      // Usuários são não-admin por padrão\n      createdAt: new Date()\n    });\n    return user;\n  } catch (error) {\n    console.error(\"Erro ao registrar usuário:\", error.message);\n    throw new Error(\"Não foi possível completar o cadastro. Tente novamente.\");\n  }\n};\n\n// Logout\nexport const logout = async () => {\n  try {\n    return signOut(auth);\n  } catch (error) {\n    console.error(\"Erro ao fazer logout:\", error.message);\n    throw new Error(\"Falha no logout. Tente novamente mais tarde.\");\n  }\n};","map":{"version":3,"names":["getAuth","signInWithEmailAndPassword","GoogleAuthProvider","signInWithPopup","GithubAuthProvider","createUserWithEmailAndPassword","updateProfile","signOut","initializeApp","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","db","signInWithGoogle","provider","result","user","userDocRef","uid","userDoc","exists","name","displayName","email","isAdmin","createdAt","Date","error","console","message","Error","signInWithGithub","loginWithEmail","password","userCredential","registerWithEmailAndPassword","logout"],"sources":["C:/N3_DESWEB/LoginDashboardProject/src/utils/auth.js"],"sourcesContent":["import {\n  getAuth,\n  signInWithEmailAndPassword,\n  GoogleAuthProvider,\n  signInWithPopup,\n  GithubAuthProvider,\n  createUserWithEmailAndPassword,\n  updateProfile,\n  signOut,\n} from \"firebase/auth\";\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\n\n// Configuração do Firebase\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCG5Ipy3n97_Q0wuW3OIpRlFWKRorRh8Wg\",\n  authDomain: \"n3desweb.firebaseapp.com\",\n  projectId: \"n3desweb\",\n  storageBucket: \"n3desweb.appspot.com\",\n  messagingSenderId: \"506352280001\",\n  appId: \"1:506352280001:web:085c2d8997a3e2f19b4f40\",\n  measurementId: \"G-K4TTM7E95W\",\n};\n\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getFirestore(app);\n\n// Login com Google\nexport const signInWithGoogle = async () => {\n  try {\n    const provider = new GoogleAuthProvider();\n    const result = await signInWithPopup(auth, provider);\n    const user = result.user;\n\n    const userDocRef = doc(db, \"users\", user.uid);\n    const userDoc = await getDoc(userDocRef);\n\n    if (!userDoc.exists()) {\n      await setDoc(userDocRef, {\n        name: user.displayName || \"Usuário\",\n        email: user.email,\n        isAdmin: false,\n        createdAt: new Date(),\n      });\n    }\n\n    return user;\n  } catch (error) {\n    console.error(\"Erro ao fazer login com Google:\", error.message);\n    throw new Error(\"Falha no login com Google. Tente novamente mais tarde.\");\n  }\n};\n\n// Login com GitHub\nexport const signInWithGithub = async () => {\n  try {\n    const provider = new GithubAuthProvider();\n    const result = await signInWithPopup(auth, provider);\n    const user = result.user;\n\n    const userDocRef = doc(db, \"users\", user.uid);\n    const userDoc = await getDoc(userDocRef);\n\n    if (!userDoc.exists()) {\n      await setDoc(userDocRef, {\n        name: user.displayName || \"Usuário\",\n        email: user.email,\n        isAdmin: false,\n        createdAt: new Date(),\n      });\n    }\n\n    return user;\n  } catch (error) {\n    console.error(\"Erro ao fazer login com GitHub:\", error.message);\n    throw new Error(\"Falha no login com GitHub. Tente novamente mais tarde.\");\n  }\n};\n\n// Login com E-mail/Senha\nexport const loginWithEmail = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    return userCredential.user;\n  } catch (error) {\n    console.error(\"Erro ao fazer login com e-mail:\", error.message);\n    throw new Error(\"Falha no login. Verifique suas credenciais e tente novamente.\");\n  }\n};\n\n// Cadastro com E-mail/Senha\nexport const registerWithEmailAndPassword = async (name, email, password) => {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n\n    // Atualiza o perfil do usuário no Firebase Auth\n    await updateProfile(user, { displayName: name });\n\n    // Cria o documento do usuário no Firestore\n    await setDoc(doc(db, \"users\", user.uid), {\n      name,\n      email,\n      isAdmin: false, // Usuários são não-admin por padrão\n      createdAt: new Date(),\n    });\n\n    return user;\n  } catch (error) {\n    console.error(\"Erro ao registrar usuário:\", error.message);\n    throw new Error(\"Não foi possível completar o cadastro. Tente novamente.\");\n  }\n};\n\n// Logout\nexport const logout = async () => {\n  try {\n    return signOut(auth);\n  } catch (error) {\n    console.error(\"Erro ao fazer logout:\", error.message);\n    throw new Error(\"Falha no logout. Tente novamente mais tarde.\");\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}