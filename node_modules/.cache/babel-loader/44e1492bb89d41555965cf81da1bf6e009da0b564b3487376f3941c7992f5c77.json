{"ast":null,"code":"import { getAuth, signInWithPopup, GoogleAuthProvider, GithubAuthProvider, signInWithEmailAndPassword, createUserWithEmailAndPassword, updateProfile, signOut } from \"firebase/auth\";\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, doc, setDoc, getDoc } from \"firebase/firestore\";\n\n// Configuração do Firebase\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCG5Ipy3n97_Q0wuW3OIpRlFWKRorRh8Wg\",\n  authDomain: \"n3desweb.firebaseapp.com\",\n  projectId: \"n3desweb\",\n  storageBucket: \"n3desweb.appspot.com\",\n  messagingSenderId: \"506352280001\",\n  appId: \"1:506352280001:web:085c2d8997a3e2f19b4f40\",\n  measurementId: \"G-K4TTM7E95W\"\n};\n\n// Inicializar Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth();\nconst db = getFirestore();\n\n// Login com Google\nexport const signInWithGoogle = async () => {\n  const provider = new GoogleAuthProvider();\n  const result = await signInWithPopup(auth, provider);\n  const user = result.user;\n\n  // Verificar se o usuário já está no Firestore\n  const userDoc = await getDoc(doc(db, \"users\", user.uid));\n  if (!userDoc.exists()) {\n    // Criar o documento para o usuário no Firestore\n    await setDoc(doc(db, \"users\", user.uid), {\n      name: user.displayName,\n      email: user.email,\n      isAdmin: false // Por padrão, não é admin\n    });\n  }\n  return user;\n};\n\n// Login com GitHub\nexport const signInWithGithub = async () => {\n  const provider = new GithubAuthProvider();\n  const result = await signInWithPopup(auth, provider);\n  const user = result.user;\n\n  // Verificar se o usuário já está no Firestore\n  const userDoc = await getDoc(doc(db, \"users\", user.uid));\n  if (!userDoc.exists()) {\n    // Criar o documento para o usuário no Firestore\n    await setDoc(doc(db, \"users\", user.uid), {\n      name: user.displayName,\n      email: user.email,\n      isAdmin: false // Por padrão, não é admin\n    });\n  }\n  return user;\n};\n\n// Login com e-mail e senha\nexport const loginWithEmail = async (email, password) => {\n  const userCredential = await signInWithEmailAndPassword(auth, email, password);\n  return userCredential.user;\n};\n\n// Cadastro com e-mail e senha\nexport const registerWithEmailAndPassword = async (name, email, password, isAdmin = false) => {\n  const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n  const user = userCredential.user;\n\n  // Atualizar o perfil do usuário com o nome\n  await updateProfile(user, {\n    displayName: name\n  });\n\n  // Salvar no Firestore\n  await setDoc(doc(db, \"users\", user.uid), {\n    name,\n    email,\n    isAdmin // Define se o usuário é admin ou não\n  });\n  return user;\n};\n\n// Buscar dados do usuário\nexport const getUserData = async uid => {\n  const userDoc = await getDoc(doc(db, \"users\", uid));\n  return userDoc.exists() ? userDoc.data() : null;\n};\n\n// Logout\nexport const logout = async () => {\n  return signOut(auth);\n};","map":{"version":3,"names":["getAuth","signInWithPopup","GoogleAuthProvider","GithubAuthProvider","signInWithEmailAndPassword","createUserWithEmailAndPassword","updateProfile","signOut","initializeApp","getFirestore","doc","setDoc","getDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","db","signInWithGoogle","provider","result","user","userDoc","uid","exists","name","displayName","email","isAdmin","signInWithGithub","loginWithEmail","password","userCredential","registerWithEmailAndPassword","getUserData","data","logout"],"sources":["C:/N3_DESWEB/LoginDashboardProject/src/utils/auth.js"],"sourcesContent":["import {\n  getAuth,\n  signInWithPopup,\n  GoogleAuthProvider,\n  GithubAuthProvider,\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  updateProfile,\n  signOut,\n} from \"firebase/auth\";\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, doc, setDoc, getDoc } from \"firebase/firestore\";\n\n// Configuração do Firebase\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCG5Ipy3n97_Q0wuW3OIpRlFWKRorRh8Wg\",\n  authDomain: \"n3desweb.firebaseapp.com\",\n  projectId: \"n3desweb\",\n  storageBucket: \"n3desweb.appspot.com\",\n  messagingSenderId: \"506352280001\",\n  appId: \"1:506352280001:web:085c2d8997a3e2f19b4f40\",\n  measurementId: \"G-K4TTM7E95W\",\n};\n\n// Inicializar Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth();\nconst db = getFirestore();\n\n// Login com Google\nexport const signInWithGoogle = async () => {\n  const provider = new GoogleAuthProvider();\n  const result = await signInWithPopup(auth, provider);\n  const user = result.user;\n\n  // Verificar se o usuário já está no Firestore\n  const userDoc = await getDoc(doc(db, \"users\", user.uid));\n  if (!userDoc.exists()) {\n    // Criar o documento para o usuário no Firestore\n    await setDoc(doc(db, \"users\", user.uid), {\n      name: user.displayName,\n      email: user.email,\n      isAdmin: false, // Por padrão, não é admin\n    });\n  }\n  return user;\n};\n\n// Login com GitHub\nexport const signInWithGithub = async () => {\n  const provider = new GithubAuthProvider();\n  const result = await signInWithPopup(auth, provider);\n  const user = result.user;\n\n  // Verificar se o usuário já está no Firestore\n  const userDoc = await getDoc(doc(db, \"users\", user.uid));\n  if (!userDoc.exists()) {\n    // Criar o documento para o usuário no Firestore\n    await setDoc(doc(db, \"users\", user.uid), {\n      name: user.displayName,\n      email: user.email,\n      isAdmin: false, // Por padrão, não é admin\n    });\n  }\n  return user;\n};\n\n// Login com e-mail e senha\nexport const loginWithEmail = async (email, password) => {\n  const userCredential = await signInWithEmailAndPassword(auth, email, password);\n  return userCredential.user;\n};\n\n// Cadastro com e-mail e senha\nexport const registerWithEmailAndPassword = async (name, email, password, isAdmin = false) => {\n  const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n  const user = userCredential.user;\n\n  // Atualizar o perfil do usuário com o nome\n  await updateProfile(user, { displayName: name });\n\n  // Salvar no Firestore\n  await setDoc(doc(db, \"users\", user.uid), {\n    name,\n    email,\n    isAdmin, // Define se o usuário é admin ou não\n  });\n\n  return user;\n};\n\n// Buscar dados do usuário\nexport const getUserData = async (uid) => {\n  const userDoc = await getDoc(doc(db, \"users\", uid));\n  return userDoc.exists() ? userDoc.data() : null;\n};\n\n// Logout\nexport const logout = async () => {\n  return signOut(auth);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}