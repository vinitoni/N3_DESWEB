{"ast":null,"code":"import { getAuth, signInWithEmailAndPassword, GoogleAuthProvider, signInWithPopup, GithubAuthProvider, createUserWithEmailAndPassword, updateProfile, signOut } from \"firebase/auth\";\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\n\n// Configuração do Firebase\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCG5Ipy3n97_Q0wuW3OIpRlFWKRorRh8Wg\",\n  authDomain: \"n3desweb.firebaseapp.com\",\n  projectId: \"n3desweb\",\n  storageBucket: \"n3desweb.appspot.com\",\n  messagingSenderId: \"506352280001\",\n  appId: \"1:506352280001:web:085c2d8997a3e2f19b4f40\",\n  measurementId: \"G-K4TTM7E95W\"\n};\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getFirestore(app);\n\n// Buscar Dados do Usuário\nexport const getUserData = async uid => {\n  try {\n    const userDocRef = doc(db, \"users\", uid);\n    const userDoc = await getDoc(userDocRef);\n    if (userDoc.exists()) {\n      return userDoc.data();\n    } else {\n      throw new Error(\"Usuário não encontrado no banco de dados.\");\n    }\n  } catch (error) {\n    console.error(\"Erro ao buscar dados do usuário:\", error.message);\n    throw new Error(\"Não foi possível carregar os dados do usuário.\");\n  }\n};\n\n// Login com Google\nexport const signInWithGoogle = async () => {\n  try {\n    const provider = new GoogleAuthProvider();\n    const result = await signInWithPopup(auth, provider);\n    const user = result.user;\n    const userDocRef = doc(db, \"users\", user.uid);\n    const userDoc = await getDoc(userDocRef);\n    if (!userDoc.exists()) {\n      await setDoc(userDocRef, {\n        name: user.displayName || \"Usuário\",\n        email: user.email,\n        isAdmin: false,\n        createdAt: new Date()\n      });\n    }\n    return user;\n  } catch (error) {\n    console.error(\"Erro ao fazer login com Google:\", error.message);\n    throw new Error(\"Falha no login com Google. Tente novamente mais tarde.\");\n  }\n};\n\n// Login com GitHub\nexport const signInWithGithub = async () => {\n  try {\n    const provider = new GithubAuthProvider();\n    const result = await signInWithPopup(auth, provider);\n    const user = result.user;\n    const userDocRef = doc(db, \"users\", user.uid);\n    const userDoc = await getDoc(userDocRef);\n    if (!userDoc.exists()) {\n      await setDoc(userDocRef, {\n        name: user.displayName || \"Usuário\",\n        email: user.email,\n        isAdmin: false,\n        createdAt: new Date()\n      });\n    }\n    return user;\n  } catch (error) {\n    console.error(\"Erro ao fazer login com GitHub:\", error.message);\n    throw new Error(\"Falha no login com GitHub. Tente novamente mais tarde.\");\n  }\n};\n\n// Login com E-mail/Senha\nexport const loginWithEmail = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    return userCredential.user;\n  } catch (error) {\n    console.error(\"Erro ao fazer login com e-mail:\", error.message);\n    throw new Error(\"Falha no login. Verifique suas credenciais e tente novamente.\");\n  }\n};\n\n// Cadastro com E-mail/Senha\nexport const registerWithEmailAndPassword = async (name, email, password) => {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n    await updateProfile(user, {\n      displayName: name\n    });\n    await setDoc(doc(db, \"users\", user.uid), {\n      name,\n      email,\n      isAdmin: false,\n      createdAt: new Date()\n    });\n    return user;\n  } catch (error) {\n    console.error(\"Erro ao registrar usuário:\", error.message);\n    throw new Error(\"Não foi possível completar o cadastro. Tente novamente.\");\n  }\n};\n\n// Logout\nexport const logout = async () => {\n  try {\n    return signOut(auth);\n  } catch (error) {\n    console.error(\"Erro ao fazer logout:\", error.message);\n    throw new Error(\"Falha no logout. Tente novamente mais tarde.\");\n  }\n};","map":{"version":3,"names":["getAuth","signInWithEmailAndPassword","GoogleAuthProvider","signInWithPopup","GithubAuthProvider","createUserWithEmailAndPassword","updateProfile","signOut","initializeApp","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","db","getUserData","uid","userDocRef","userDoc","exists","data","Error","error","console","message","signInWithGoogle","provider","result","user","name","displayName","email","isAdmin","createdAt","Date","signInWithGithub","loginWithEmail","password","userCredential","registerWithEmailAndPassword","logout"],"sources":["C:/N3_DESWEB/LoginDashboardProject/src/pages/Shop.js"],"sourcesContent":["import {\r\n    getAuth,\r\n    signInWithEmailAndPassword,\r\n    GoogleAuthProvider,\r\n    signInWithPopup,\r\n    GithubAuthProvider,\r\n    createUserWithEmailAndPassword,\r\n    updateProfile,\r\n    signOut,\r\n  } from \"firebase/auth\";\r\n  import { initializeApp } from \"firebase/app\";\r\n  import { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\r\n  \r\n  // Configuração do Firebase\r\n  const firebaseConfig = {\r\n    apiKey: \"AIzaSyCG5Ipy3n97_Q0wuW3OIpRlFWKRorRh8Wg\",\r\n    authDomain: \"n3desweb.firebaseapp.com\",\r\n    projectId: \"n3desweb\",\r\n    storageBucket: \"n3desweb.appspot.com\",\r\n    messagingSenderId: \"506352280001\",\r\n    appId: \"1:506352280001:web:085c2d8997a3e2f19b4f40\",\r\n    measurementId: \"G-K4TTM7E95W\",\r\n  };\r\n  \r\n  const app = initializeApp(firebaseConfig);\r\n  const auth = getAuth(app);\r\n  const db = getFirestore(app);\r\n  \r\n  // Buscar Dados do Usuário\r\n  export const getUserData = async (uid) => {\r\n    try {\r\n      const userDocRef = doc(db, \"users\", uid);\r\n      const userDoc = await getDoc(userDocRef);\r\n  \r\n      if (userDoc.exists()) {\r\n        return userDoc.data();\r\n      } else {\r\n        throw new Error(\"Usuário não encontrado no banco de dados.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Erro ao buscar dados do usuário:\", error.message);\r\n      throw new Error(\"Não foi possível carregar os dados do usuário.\");\r\n    }\r\n  };\r\n  \r\n  // Login com Google\r\n  export const signInWithGoogle = async () => {\r\n    try {\r\n      const provider = new GoogleAuthProvider();\r\n      const result = await signInWithPopup(auth, provider);\r\n      const user = result.user;\r\n  \r\n      const userDocRef = doc(db, \"users\", user.uid);\r\n      const userDoc = await getDoc(userDocRef);\r\n  \r\n      if (!userDoc.exists()) {\r\n        await setDoc(userDocRef, {\r\n          name: user.displayName || \"Usuário\",\r\n          email: user.email,\r\n          isAdmin: false,\r\n          createdAt: new Date(),\r\n        });\r\n      }\r\n  \r\n      return user;\r\n    } catch (error) {\r\n      console.error(\"Erro ao fazer login com Google:\", error.message);\r\n      throw new Error(\"Falha no login com Google. Tente novamente mais tarde.\");\r\n    }\r\n  };\r\n  \r\n  // Login com GitHub\r\n  export const signInWithGithub = async () => {\r\n    try {\r\n      const provider = new GithubAuthProvider();\r\n      const result = await signInWithPopup(auth, provider);\r\n      const user = result.user;\r\n  \r\n      const userDocRef = doc(db, \"users\", user.uid);\r\n      const userDoc = await getDoc(userDocRef);\r\n  \r\n      if (!userDoc.exists()) {\r\n        await setDoc(userDocRef, {\r\n          name: user.displayName || \"Usuário\",\r\n          email: user.email,\r\n          isAdmin: false,\r\n          createdAt: new Date(),\r\n        });\r\n      }\r\n  \r\n      return user;\r\n    } catch (error) {\r\n      console.error(\"Erro ao fazer login com GitHub:\", error.message);\r\n      throw new Error(\"Falha no login com GitHub. Tente novamente mais tarde.\");\r\n    }\r\n  };\r\n  \r\n  // Login com E-mail/Senha\r\n  export const loginWithEmail = async (email, password) => {\r\n    try {\r\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n      return userCredential.user;\r\n    } catch (error) {\r\n      console.error(\"Erro ao fazer login com e-mail:\", error.message);\r\n      throw new Error(\"Falha no login. Verifique suas credenciais e tente novamente.\");\r\n    }\r\n  };\r\n  \r\n  // Cadastro com E-mail/Senha\r\n  export const registerWithEmailAndPassword = async (name, email, password) => {\r\n    try {\r\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n      const user = userCredential.user;\r\n  \r\n      await updateProfile(user, { displayName: name });\r\n  \r\n      await setDoc(doc(db, \"users\", user.uid), {\r\n        name,\r\n        email,\r\n        isAdmin: false,\r\n        createdAt: new Date(),\r\n      });\r\n  \r\n      return user;\r\n    } catch (error) {\r\n      console.error(\"Erro ao registrar usuário:\", error.message);\r\n      throw new Error(\"Não foi possível completar o cadastro. Tente novamente.\");\r\n    }\r\n  };\r\n  \r\n  // Logout\r\n  export const logout = async () => {\r\n    try {\r\n      return signOut(auth);\r\n    } catch (error) {\r\n      console.error(\"Erro ao fazer logout:\", error.message);\r\n      throw new Error(\"Falha no logout. Tente novamente mais tarde.\");\r\n    }\r\n  };\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}